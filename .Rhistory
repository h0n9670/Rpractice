crime[발생$]
crime["발생"$]
crime[contains("발생$")]
crime[contains("발생")]
crime.col()
crime.columns()
crime$"발생$"
crime[$"발생$"]]
crime[$"발생$"]
crime[관서명]
crime['관서명']
library(stringr)
crime[grep("발생"$)]
crime[grep("발생$")]
names(crime)
grep("발생"$,names(crime))
grep("발생$",names(crime))
grep("발생$",names(crime),value=T)
occur = grep("발생$",names(crime),value=T)
arrest = grep("검거$",names(crime),value=T)
crime[occur]
crime["관서명",occur]
crime[c("관서명",occur)]
sum(crim_occur)
sum(crime_occur)
summary(crime_occur)
crime_occur=crime[c("관서명",occur)]
summarise(crime_occur)
crime_occur
crime_occur[0]
crime_occur[1]
crime_occur[2]
head(crime)
crime$arrest <- crime[4]+crime[6]+crime[8]+crime[10]+crime[12]
crime$occur <- crime[3]+crime[5]+crime[7]+crime[9]+crime[11]
head(crime)
head(crime)
#-----------------------------------------------------------------------------
crime <- read.csv("./crime_in_Seoul.csv")
head(crime)
crime$arrest <- crime[4]+crime[6]
head(crime)
#-----------------------------------------------------------------------------
crime <- read.csv("./crime_in_Seoul.csv")
crime[4]
crime[1]
crime$arrest <- crime[3]+crime[5]+crime[7]+crime[9]+crime[11]
head(crime)
#-----------------------------------------------------------------------------
crime <- read.csv("./crime_in_Seoul.csv")
crime$arrest <- crime[3]+crime[5]
crime$arrest
crime$arrest <- crime[3]+crime[5]+crime[7]
head(crime)
crime$arrest <- crime[3]+crime[5]+crime[7]+crime[9]+crime[11]
crime$arrest <- crime[3]+crime[5]+crime[7]+crime[9]
crime$검거 <- crime[3]+crime[5]+crime[7]+crime[9]
crime$검거 <- crime[3]+crime[5]+crime[7]
head(crime)
#-----------------------------------------------------------------------------
crime <- read.csv("./crime_in_Seoul.csv")
crime.is.na()
#-----------------------------------------------------------------------------
crime <- read.csv("./crime_in_Seoul.csv")
arrest <-
arrest <- crime %>%
select("검거$")
arrest <-
arrest <- crime %>%
select(검거$)
arrest <-
arrest <- crime %>%
select('검거$')
arrest <-
arrest <- crime %>%
select(c('검거$'))
arrest <-
arrest <- crime %>%
select(c('검거$'))
#-----------------------------------------------------------------------------
crime <- read.csv("./crime_in_Seoul.csv")
head(crime)
arrest <-
arrest <- crime %>%
select(살인.검거)
arrest <-
arrest <- crime %>%
mutate(total_arrest=살인.검거+강도.검거+강간.검거+절도.검거+폭력.검거)
crime %>%
mutate(total_arrest=살인.검거+강도.검거+강간.검거+절도.검거+폭력.검거)
head(crime)
crime %>%
mutate(total_arrest=살인.검거+강도.검거+강간.검거+as.integer(절도.검거)+as.integer(폭력.검거))
head(crime)
crime <- crime %>%
mutate(total_arrest=살인.검거+강도.검거+강간.검거+as.integer(절도.검거)+as.integer(폭력.검거))
head(crime)
crime <- crime %>%
mutate(total_occur=살인.발생+강도.발생+강간.발생+as.integer(절도.발생)+as.integer(폭력.발생))
head(crime)
crime1 <- crime %>%
mutate(arrest_rate=round(total_arrest/total_occur))
head(crime1)
crime1 <- crime %>%
mutate(arrest_rate=round(total_arrest/total_occur*100))
head(crime1)
crim$절도.발생 <- gsub(",","", crime$절도.발생)
crime$절도.발생 <- gsub(",","", crime$절도.발생)
crime$폭력.발생 <- gsub(",","", crime$폭력.발생)
crime$폭력.검거 <- gsub(",","", crime$폭력.검거)
crime <- crime %>%
mutate(total_arrest=살인.검거+강도.검거+강간.검거+as.integer(절도.검거)+as.integer(폭력.검거))
crime <- crime %>%
mutate(total_occur=살인.발생+강도.발생+강간.발생+as.integer(절도.발생)+as.integer(폭력.발생))
crime1 <- crime %>%
mutate(arrest_rate=round(total_arrest/total_occur*100))
head(crime1)
crime <- crime %>%
mutate(arrest_rate=round(total_arrest/total_occur*100))
head(crime)
sum(crime$total_occur)
crime$occur_rate <- round(crime$total_occur/seoul_occur*100,3)
seoul_occur <- sum(crime$total_occur)
crime$occur_rate <- round(crime$total_occur/seoul_occur*100,3)
head(crime$occur_rate)
geom_text(data = crime,
aes(label = arrest_rate, vjust=2))
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))+
geom_text(data = crime,
aes(label = occur_rate, vjust=1))+
geom_text(data = crime,
aes(label = arrest_rate, vjust=2))
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))+
geom_text(data = crime,
aes(label = occur_rate, vjust=1))+
geom_text(data = crime,
aes(label = arrest_rate, vjust=2))
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))+
geom_text(data = crime,
aes(label = occur_rate, vjust=1),colour='blue')+
geom_text(data = crime,
aes(label = arrest_rate, vjust=2),colour='brown')
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))+
geom_text(data = crime,
aes(label = occur_rate, vjust=1),colour='blue',size =3)+
geom_text(data = crime,
aes(label = arrest_rate, vjust=2),colour='brown',size=3)
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))+
geom_text(data = crime,
aes(label = occur_rate, vjust=1),colour='blue',size =3)
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))
ggmap(seoul_map)+
geom_point(data = crime_address_final,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime_address_final,
aes(label = 관서명, vjust=-1))+
geom_text(data = crime,
aes(label = occur_rate, vjust=1),colour='blue',size =3)
crime <- left_join(crime,crime_address_final,by="관서명")
head(crime)
ggmap(seoul_map)+
geom_point(data = crime,
aes(x=lon,y=lat),
colour = "red",
size = 3)+
geom_text(data = crime,
aes(label = 관서명, vjust=-1))+
geom_text(data = crime,
aes(label = occur_rate, vjust=1),colour='blue',size =3)+
geom_text(data = crime,
aes(label = arrest_rate, vjust=2),colour='brown',size=3)
install.packages("ggiraphExtra")
library(ggiraphExtra)
str(USArrests)
head(USArrests)
library(tibble)
?tibble
?tibble
?`tibble-package`
#행 이름을 state 변수로 바꿔 데이터 프레임 생성
crime <- rownames_to_column(USArrests, var = "state")
#지도 데이터와 동일하게 맞추기 위해서 state의 값을 소문자로 수정
crime$state <-  tolower(crime$state)
?tolower
?rownames_to_column
View(crime)
#미국 주 지도 데이터 준비하기
library(ggplot2)
states_map <- map_data("state")
str(states_map)
#미국 주 지도 데이터 준비하기
library(ggplot2)
str(states_map)
states_map <- map_data("state")
str(states_map)
states_map <- map_data("state")
#미국 주 지도 데이터 준비하기
library(ggplot2)
states_map <- map_data("state")
install.packages("maps")
library(maps)
states_map <- map_data("state")
str(states_map)
?str()
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes(fill = Murder, #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map)   #지도 데이터
install.packages("mapproj")
library(mapproj)
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes(fill = Murder, #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map)   #지도 데이터
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes(fill, #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map)   #지도 데이터
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes( #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map)   #지도 데이터
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes(fill = Murder, #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map)   #지도 데이터
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes(fill = Murder, #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map) %>%    #지도 데이터
?ggChoropleth
?ggChoropleth
View(crime)
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes(fill = Murder, #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map) +  #지도 데이터
geom_text(data = crime_data_final, aes(label = state, vjust = -2), size=3)
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes(fill = Murder, #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map) +  #지도 데이터
geom_text(data = crime, aes(label = state, vjust = -2), size=3)
#단계 구분도 만들기
ggChoropleth(data = crime,  #지도에 표현할 데이터
aes(fill = Murder, #색깔로 표현할 변수
map_id = state), # 지역 기준 변수
map = states_map,  #지도 데이터
interactive = T)
library(stringi)
library(devtools)
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
# 대한민국 시도별 인구 데이터 준비하기
str(changeCode(korpop1))
devtools::install_github("h0n9670/RealEstate")
librart(dplyr)
library(dplyr)
korpop1 <- rename(korpop1,
pop = 총인구_명,
name = 행정구역별_읍면동)
str(changeCode)
str(changeCode(kormap1))
devtools::install_github("h0n9670/RealEstate")
devtools::install_github("h0n9670/Rpractice")
ggChoropleth(data = korpop1,
aes(fill = pop,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
devtools::install_github("cardiomoon/moonBook2")
devtools::install_github("cardiomoon/moonBook2")
detach("package:tibble", unload = TRUE)
detach("package:tibble", unload = TRUE)
devtools::install_github("cardiomoon/moonBook2")
remove.packages("tibble")
remove.packages("tibble")
devtools::install_github("cardiomoon/moonBook2")
install.packages("tibble")
ggChoropleth(data = korpop1,  #지도에 표현할 데이터
aes(fill = pop,    # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,      # 지도 데이터
interactive = T)    # 인터렉티브
library(tibble)
ggChoropleth(data = korpop1,  #지도에 표현할 데이터
aes(fill = pop,    # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,      # 지도 데이터
interactive = T)    # 인터렉티브
library(ggiraphExtra)
ggChoropleth(data = korpop1,  #지도에 표현할 데이터
aes(fill = pop,    # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,      # 지도 데이터
interactive = T)    # 인터렉티브
#미국 주 지도 데이터 준비하기
library(ggplot2)
library(maps)
library(mapproj)
# 11.2 대한민국 시도별 인구, 결핵 환자 수 단계 구분도 만들기
# 대한민국 시도별 인구 단계 구분도 만들기
# 패키지 준비하기
library(stringi)
library(devtools)
library(kormaps2014)
library(dplyr)
ggChoropleth(data = korpop1,  #지도에 표현할 데이터
aes(fill = pop,    # 색깔로 표현할 변수
map_id = code,    # 지역 기준 변수
tooltip = name),   # 지도 위에 표시할 지역명
map = kormap1,      # 지도 데이터
interactive = T)    # 인터렉티브
#대한민국 시도별 결핵 환자 수 단계 구분도 만들기
str(changeCode(tbc))
ggChoropleth(data = tbc,
aes(fill = NewPts,
map_id = code,
tooltip = name),
map = kormap1,
interactive = T)
# 12-1 plotly 패키지로 인터랙티브 그래프 만들기
# 인터랙티브 그래프 만들기
# 패키지 준비하기
library(plotly)
install.packages("plotly")
# 12-1 plotly 패키지로 인터랙티브 그래프 만들기
# 인터랙티브 그래프 만들기
# 패키지 준비하기
library(plotly)
# ggplot으로 그래프 그리기
library(ggplot2)
p <- ggplot(data = mpg, aes(x = displ, y= hwy, col = drv))+geom_point()
p
ggplotly(p)
p <- ggplot(data = mpg, aes(x = displ, y= hwy, col = drv))+geom_point(positon = "dodge")
ggplotly(p)
p <- ggplot(data = mpg, aes(x = displ, y= hwy, col = drv))+geom_bar(positon = "dodge")
ggplotly(p)
p <- ggplot(data = mpg, aes(x = displ, y= hwy, col = drv))+geom_bar(position = "dodge")
ggplotly(p)
ggplotly(p)
ggplotly(p)
ggplotly(p)
p <- ggplot(data = mpg, aes(x = displ, y= hwy, col = drv))+geom_bar(position = "dodge")
# 인터랙티브 막대 그래프 만들기
d<-ggplot(data=diamonds, aes(x=cut, fill=clarity))+geom_bar(position = "dodge")
ggplotly(d)
install.packages("dygraphs")
library(dygraphs)
ecomnomics <- ggplot2::economics
head(economics)
# 시간 순서 속성을 지니는 xts 데이터 타입으로 변경
library(xts)
eco <- xts(ecomnomics$unemploy, order.by = economics$date)
head(ece)
head(eco)
dygraph(eco)
dygraph(eco) %>% dyRangeSelector()
dygraph(eco) %>% dyRangeSelector() %>% dyRoller()
# 여러 값 표현하기
# 저축률
eco_a <- xts(economics$psavert, order.by = economics$date)
# 실업자 수
eco_b <- xts(economics$unemploy/1000, order.by = ecomnomics$date)
# 합치기
eco2 <- cbind(eco_a,eco_b)
colnames(eco2) <- c("psavert","unemploy") #q변수명 바꾸기기
head(eco2)
#그래프 만들기
dygraph(eco2)
#그래프 만들기
dygraph(eco2)%>% dyRangeSelector()
#Compact 자동차와 suv 자동차의 도시 연비 t 검정
# 데이터 준비
mpg <-  as.data.frame(ggplot2::mpg)
librart(dplyr)
library(dplyr)
mpg_diff <- mpg %>%
select(class, city) %>%
filter(class %in% c("compact","suv"))
#Compact 자동차와 suv 자동차의 도시 연비 t 검정
# 데이터 준비
mpg <-  as.data.frame(ggplot2::mpg)
mpg_diff <- mpg %>%
select(class, city) %>%
filter(class %in% c("compact","suv"))
mpg_diff <- mpg %>%
select(class, cty) %>%
filter(class %in% c("compact","suv"))
head(mpg_diff)
table(mpg_diff$class)
t.test(data = mpg_diff, cty ~ class, var.equal = T)
#일반 휘발유와 고급 휘발유의 도시 연비 t검정
#데이터 준비
mpg_diff2 <- mpg %>%
select(fl, cty) %>%
filter(fl %in% c("r","p"))  #r : regular, p : premium
table(mpg_diff2$fl)
#t-test
t.test(data = mpg_diff2, cty ~ fl, var.equal = T)
# 실업자 수와 개인 소비 지출의 상관관계
# 데이터 준비
economics <- as.data.frame(ggplot2::economics)
cor.test(economics$unemploy, economics$pce)
#데이터 준비
head(mtcars)
# 상관행렬 만들기
car_cor <- cor(mtcars)  # 상관행렬 생성
round(car_cor,2)        # 소수점 셋째 자리에서 반올림해서 출력
install.packages("corrplot")
library(corrplot)
corrplot(car_cor)
corrplot(car_cor, method = "number")
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hclust",
addCoef.col = "black",
tl.col = "black",
tl.srt = 45,
diag = F)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(car_cor,
method = "color",
col = col(200),
type = "lower",
order = "hclust",
addCoef.col = "black",
tl.col = "black",
tl.srt = 45,
diag = F)
#그래프 만들기
dygraph(eco2)%>% dyRangeSelector()
