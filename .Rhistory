#결측치 포함한 상태로 연산
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
#결측치 제거
df %>% filter(is.na(score))   # score 가 NA 인 데이터만 출력
df %>% filter(!is.na(score))  # score 결측치 제거
df_nomiss <- df %>% filter(!is.na(score))  # score 결측치 제거
mean(df_nomiss$score)                      # score 평균 산출
sum(df_nomiss$score)                       # score 합계 산출
#여러변수 결측치 제거
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
df_nomiss2 <- na.omit(df)  # 모든 변수에 결측치 없는 데이터 추출
df_nomiss2                 # 출력
#결측치 제외 기능 이용하기
mean(df$score, na.rm = T)  # 결측치 제외하고 평균 산출
sum(df$score, na.rm = T)   # 결측치 제외하고 합계 산출
# 결측치 이용
exam <- read.csv("csv_exam.csv")            # 데이터 불러오기
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15 행의 math 에 NA 할당
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))  # 결측치 제외하고 평균 산출
# 결측치 이용
exam <- read.csv("csv_exam.csv")            # 데이터 불러오기
# 결측치 이용
exam <- read.csv(file.choose(), header = T)            # 데이터 불러오기
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15 행의 math 에 NA 할당
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))  # 결측치 제외하고 평균 산출
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15 행의 math 에 NA 할당
exam %>% summarise(mean_math = mean(math))             # 평균 산출
# 결측치 이용
exam <- read.csv(file.choose(), header = T)            # 데이터 불러오기
exam
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15 행의 math 에 NA 할당
exam
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(exam$math))             # 평균 산출
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam$math <- ifelse(is.na(exam$math), mean(exam$math), exam$math)  # math 가 NA 면 55 로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
exam$math <- ifelse(is.na(exam$math), mean(exam$math), exam$math)  # math 가 NA 면 55 로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
exam$math <- ifelse(is.na(exam$math), 55, exam$math)  # math 가 NA 면 55 로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
#이상치
outlier <- data.frame(sex = c(1, 2, 1, 3, 2, 1), score = c(5, 4, 3, 4, 2, 6))
outlier
table(outlier$sex)
table(outlier$score)
# sex 가 3 이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex) outlier
# sex 가 3 이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
# sex 가 1~5 아니면 NA 할당
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
#결측치 제외하고 분석
outlier %>%   filter(!is.na(sex) & !is.na(score)) %>%   group_by(sex) %>%   summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>% group_by(sex) %>% summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
outlier
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>% group_by(sex) %>% summarise(mean_score = mean(score))
#상자그림으로 극단치 기준 정해서 제거하기
mpg <- as.data.frame(ggplot2::mpg) boxplot(mpg$hwy)
#상자그림으로 극단치 기준 정해서 제거하기
mpg <- as.data.frame(ggplot2::mpg) boxplot(mpg$hwy)
#상자그림으로 극단치 기준 정해서 제거하기
mpg <- as.data.frame(ggplot2::mpg) boxplot(mpg$hwy)
library(ggplot2)
#상자그림으로 극단치 기준 정해서 제거하기
mpg <- as.data.frame(ggplot2::mpg) boxplot(mpg$hwy)
#상자그림으로 극단치 기준 정해서 제거하기
mpg <- as.data.frame(ggplot2::mpg)
boxplot(mpg$hwy)
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>% group_by(sex) %>% summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier
#이상치
outlier <- data.frame(sex = c(1, 2, 1, 3, 2, 1), score = c(5, 4, 3, 4, 2, 6))
outlier
table(outlier$sex)
table(outlier$score)
# sex 가 3 이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
# sex 가 1~5 아니면 NA 할당
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>% group_by(sex) %>% summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score))
boxplot(mpg$hwy)$stats  # 상자그림 통계치 출력력
#배경 설정하기
ggplot(data = mpg, aes(x = displ, y = hwy))
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# x 축 범위 3~6 으로 지정
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)
# x 축 범위 3~6, y 축 범위 10~30 으로 지정
ggplot(data = mpg, aes(x = displ, y = hwy)) +    geom_point() +    xlim(3, 6) +    ylim(10, 30)
ggplot(data = mpg, aes(x = displ, y = hwy), geom_point())
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy), geom_point())
ggplot(data = mpg, aes(x = displ, y = hwy), geom_point(),xlim(3,6))
?ggplot(data = mpg, aes(x = displ, y = hwy), geom_point(),xlim(3,6))
ggplot(data = mpg, aes(x = displ, y = hwy), geom_point())
ggplot(data = mpg, aes(x = displ, y = hwy)
ggplot(data = mpg, aes(x = displ, y = hwy)+geom_point(xlim(3,6))
ggplot(data = mpg, aes(x = displ, y = hwy)+geom_point()+xlim(3,6)
ggplot(data = mpg, aes(x = displ, y = hwy))+geom_point()+xlim(3,6)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3,6)
## ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# 집단별 평균표 만들기
df_mpg <- mpg %>%   group_by(drv) %>%   summarise(mean_hwy = mean(hwy))
df_mpg
## ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# 집단별 평균표 만들기
df_mpg <- mpg %>% group_by(drv) %>% summarise(mean_hwy = mean(hwy))
library(dplyr)
## ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# 집단별 평균표 만들기
df_mpg <- mpg %>% group_by(drv) %>% summarise(mean_hwy = mean(hwy))
df_mpg
#그래프 생성하기
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
#크기순으로 정렬하기
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
# x 축 범주 변수 , y 축 빈도
ggplot(data = mpg, aes(x = drv)) + geom_bar()
# x 축 연속 변수 , y 축 빈도
ggplot(data = mpg, aes(x = hwy)) + geom_bar()
#시계열 그래프 만들기
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
#상자 그림 만들기
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
#크기순으로 정렬하기
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
#크기순으로 정렬하기
ggplot(data = df_mpg, aes(x = reorder(drv, mean_hwy), y = mean_hwy)) + geom_col()
#크기순으로 정렬하기
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
install.packages("foreign") #foreign 패키지 설치
library(foreign)
library(dplyr)
library(ggplot2)
library(readx1)
install.packages("readxl")
library(readxl)
raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
head(raw_welfare)
View(raw_welfare)
summarise(raw_welfare)
summary(raw_welfare)
info(raw_welfare)
View(raw_welfare)
str(raq_welfare)
str(raw_welfare)
dim(raw_welfare)
summary(raw_welfare)
# 변수명 바꾸기
raw_welfare <-rename(raw_welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_req7
)
# 변수명 바꾸기
raw_welfare <-rename(raw_welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7
)
#성별에 따라 월급이 다를까?
class(raw_welfare$sex)
table(raw_welfare$sex)
#이상치 결측 처리
raw_welfare$sex <-  ifelse(welfare$sex == 9, NA, welfare$sex)
#이상치 결측 처리
raw_welfare$sex <-  ifelse(raw_welfare$sex == 9, NA, raw_welfare$sex)
table(is.na(raw_welfare$sex))
#성별 항목 이름 부여
raw_welfare$sex <-  ifelse(raw_welfare$sex == 1, "male", "female")
table(welfare$sex)
table(raw_welfare$sex)
#시각화
qplot(raw_welfare$sex)
#월급
#타입확인
class(raw_welfare$income)
summary(raw_welfare$income)
table(raw_welfare$income)
table(is.na(raw_welfare$income))
qplot(raw_welfare$income)
qplot(raw_welfare$income)+xlim(0,1000)
#이상치 결측 처리
raw_welfare$income <- ifelse(raw_welfare$income %in% c(0,9999),NA,raw_welfare$income)
table(is.na(raw_welfare$income))
#성별 월급 평균표 만들기
sex_income <- welfare %>%
filter(!in.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
#성별 월급 평균표 만들기
sex_income <- raw_welfare %>%
filter(!in.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
#성별 월급 평균표 만들기
sex_income <- raw_welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
sex_income
# 차드 만들기
ggplot(data = sex_income, aes(x = sex, y = mean_income)) + geom_col()
# 변수 검토하기
class(raw_welfare$birth)
summary(raw_welfare$birth)
qplot(raw_welfare$birth)
tavle(is.na(raw_welfare$birth))
table(is.na(raw_welfare$birth))
raw_welfare$birth <-  ifelse(raw_welfare$birth == 9999, NA, raw_welfare$birth)
table(is.na(raw_welfare$birth))
summary(raw_welfare$birth)
# 파생변수 만들기 - 나이
raw_welfare$birth <- 2015 - raw_welfare$birth + 1
summary(raw_welfare$birth)
# 나이에 따른 평균 급여 표 만들기
age_income <-  welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
# 나이에 따른 평균 급여 표 만들기
age_income <-  raw_welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
# 파생변수 만들기 - 나이
raw_welfare$age <- 2015 - raw_welfare$birth + 1
summary(raw_welfare$age)
summary(raw_welfare$age)
# 파생변수 만들기 - 나이
raw_welfare$age <- 2015 - raw_welfare$birth + 1
summary(raw_welfare$age)
View(raw_welfare)
View(raw_welfare)
# 나이에 따른 평균 급여 표 만들기
age_income <-  raw_welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
head(age_income)
ggplot(data = age_income, aes(x = age, y = mean_income)) + geom_line
ggplot(data = age_income, aes(x = age, y = mean_income)) + geom_line()
table(raw_welfare$ageg)
# 파생변수 만들기 - 나이
raw_welfare$welfare <- 2015 - raw_welfare$birth + 1
# 파생변수 만들기 - 나이
raw_welfare$age <- 2015 - raw_welfare$birth + 1
summary(raw_welfare$age)
summary(raw_welfare$birth)
# 파생변수 만들기 - 나이
raw_welfare$age <- 2015 - raw_welfare$age + 1
summary(raw_welfare$age)
# 나이에 따른 평균 급여 표 만들기
age_income <-  raw_welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
head(age_income)
ggplot(data = age_income, aes(x = age, y = mean_income)) + geom_line()
raw_welfare <-  raw_wefare %>%
mutate(ageg = ifelse(age < 30, "Young",
ifelse(age<=59,"middle",'old')))
raw_welfare <-  raw_wefare %>%
mutate(ageg = ifelse(age < 30, "Young",
ifelse(age<=59,"middle",'old')))
raw_welfare <-  raw_welfare %>%
mutate(ageg = ifelse(age < 30, "Young",
ifelse(age<=59,"middle",'old')))
table(raw_welfare$ageg)
ageg_income
ageg_income <-  raw_welfare %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(mean_income = mean(income))
ageg_income
ggplot(data = ageg_income, aes(x = ageg, y = mean_income))+geom_col()
ggplot(data = ageg_income, aes(x = ageg, y = mean_income))+geom_col()+scale_x_discrete(limits = c("Young","middel","old"))
ggplot(data = ageg_income, aes(x = ageg, y = mean_income))+geom_col()+scale_x_discrete(limits = c("Young","middle","old"))
#연령대 및 성별 월급 평균표 만들기
sex_income <-  raw_welfare %>%
filter(!is.na(income)) %>%
group_by(ageg, sex) %>%
summarise(mean_income = mean(income))
sex_income
ggplot(data = ageg_income, aes(x = ageg, y = mean_income))+geom_col()
ggplot(data = ageg_income, aes(x = ageg, y = sex_income))+geom_col()
ggplot(data = sex_income, aes(x = ageg, y = sex_income))+geom_col()
ggplot(data = sex_income, aes(x = c(ageg,sex), y = sex_income))+geom_col()
ggplot(data = sex_income, aes(x = ageg, y = sex_income, fill = sex))+geom_col()
ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col()
ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col()+scale_x_discrete(limits = c("Young","middle","old"))
ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+
geom_col(position = "dodge")+
scale_x_discrete(limits = c("Young","middle","old"))
head(sex_age)
# 성별 연령별 월급 평균표 만들기
sex_age <-  raw_welfare %>%
filter(!is.na(income)) %>%
group_by(age, sex) %>%
summarise(mean_income = mean(income))
head(sex_age)
ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col()+scale_x_discrete(limits = c("Young","middle","old"))
ggplot(data = sex_age, aes(x = sex, y = mean_income, fill = sex))+geom_line()
ggplot(data = sex_age, aes(x = sex, y = mean_income, col = sex))+geom_line
ggplot(data = sex_age, aes(x = sex, y = mean_income, col = sex))+geom_line()
ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex))+geom_line()
class(welfare$code_jab)
install.packages("foreign") #foreign 패키지 설치
library(foreign)
library(dplyr)
library(ggplot2)
install.packages("readxl")
library(readxl)
welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
#데이터 검토하기
View(welfare)
str(welfare)
dim(welfare)
summary(welfare)
# 변수명 바꾸기
welfare <-rename(welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7
)
#성별
#type  확인
class(welfare$sex)
#이상치 확인
table(welfare$sex)
#이상치 결측 처리
welfare$sex <-  ifelse(welfare$sex == 9, NA, welfare$sex)
table(is.na(welfare$sex))
#성별 항목 이름 부여
welfare$sex <-  ifelse(welfare$sex == 1, "male", "female")
table(welfare$sex)
#시각화
qplot(welfare$sex)
install.packages("foreign") #foreign 패키지 설치
install.packages("foreign")
library(foreign)
library(dplyr)
library(ggplot2)
install.packages("readxl")
install.packages("readxl")
library(readxl)
list_region
list_region <- data.frame(code_resion = c(1:7),
region = c("서울",
"수도권(인천/경기)",
"부산/경남/울산",
"대구/경북",
"대전/충남",
"강원/충북",
"광주/전남/전북/제주도"))
list_region
welfare <- lift_join(welfare, list_region, id = "code_region")
welfare_r_b <- lift_join(welfare_r_b, list_region, id = "code_region")
welfare_r_b <- left_join(welfare_r_b, list_region, id = "code_region")
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
welfare <- read.spss(file = "../Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
welfare <-rename(welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7
)
welfare_r_b <- welfare[c("code_region","birth")]
welfare_r_b <- left_join(welfare_r_b, list_region, id = "code_region")
welfare_r_b <- left_join(welfare_r_b, list_region, id = "code_region")
list_region <- data.frame(code_region = c(1:7),
region = c("서울",
"수도권(인천/경기)",
"부산/경남/울산",
"대구/경북",
"대전/충남",
"강원/충북",
"광주/전남/전북/제주도"))
list_region
welfare_r_b <- left_join(welfare_r_b, list_region, id = "code_region")
welfare_r_b$birth <-  ifelse(welfare_r_b$birth == 9999, NA, welfare$birth)
table(is.na(welfare$birth))
# 파생변수 만들기 - 나이
welfare_r_b$age <- 2015 - welfare_r_b$birth + 1
summary(welfare_r_b$age)
# 연령대 설정
welfare_r_b <-  welfare_r_b %>%
mutate(ageg = ifelse(age < 30, "young",
ifelse(age<=59,"middle",'old')))
region_ageg <-  welfare %>%
group_by(region, ageg) %>%
summarise(n = n()) %>%
region_ageg <-  welfare %>%
group_by(region, ageg) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
region_ageg <-  welfare %>%
group_by(region, ageg) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = rount(n/tot_group*100,1))
region_ageg <-  welfare_r_b %>%
group_by(region, ageg) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = rount(n/tot_group*100,1))
region_ageg <-  welfare_r_b %>%
group_by(region, ageg) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100,1))
region_ageg
#count
region_ageg <-  welfare %>%
count(region, ageg) %>%
group_by(region) %>%
ggplot(data = region_ageg, aes(x = region, y = pct, fill = ageg))+geom_col()+coord_flip()
region_ageg
#count
region_ageg <-  welfare_r_b %>%
count(region, ageg) %>%
group_by(region) %>%
mutate(pct = round(n/sum(n)*100,1))
ggplot(data = region_ageg, aes(x = region, y = pct, fill = ageg))+geom_col()+coord_flip()
list_order_old
#노년층 비율 내림차순 정렬
list_order_old <- region_ageg %>%
filter(ageg == "old") %>%
arrange(pct)
list_order_old
order
# 지역명 순서 변수 만들기
order <- list_order_old$region
order
ggplot(data = region_ageg, aes(x = region, y=pct, fill = ageg))+geom_col()+coord_flip()+scale_x_discrete(limits = order)
install.packages("devtools")
library(devtools)
install_github("dkahle/ggmap")
install.packages("dplyr")
