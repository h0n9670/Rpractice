bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_+lbl,
ylim=c(0,35)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_+lbl,
ylim=c(0,35)
)
View(bp)
legend_lbl <- c("2014년","2015년")
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_+lbl,
ylim=c(0,35)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_lbl,
ylim=c(0,35)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_lbl,
ylim=c(0,35)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_lbl,
ylim=c(0,50),
beside=TRUE,
args.legend=list(x='topright')
)
plot(weight)
View(women)
weight <-  women$weight
plot(weight)
#플로팅 문자의 출력
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow'
cex=1.5)
#플로팅 문자의 출력
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow',
cex=1.5)
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow',
cex=1.5)
plot(height,weight,xlab="키",ylab="몸무게")
height <- women$height
plot(height,weight,xlab="키",ylab="몸무게")
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow',
cex=1.5)
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow',
cex=1.5)
# 플로팅 문자의 출력
plot(height,weight,xlab="키",ylab="몸무게",pch=23,col="blue",bg="yellow",cex=1.5)
#지진의 강도에 대한 히스토그램
head(quakes)
mag
mag
source('C:/R/Rworkspace/git/03.31/plot.R', encoding = 'UTF-8', echo=TRUE)
mag <- quakes$mag
mag
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진 강도",ylab="발생 건수")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,vreaks=(4,6.5, by0.5))
colors <-c("red","orange","yellow","green","navy","violet")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,vreaks=(4,6.5, by0.5))
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=(4,6.5, by0.5))
colors <-c("red","orange","yellow","green","navy","violet")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=(4,6.5, by0.5))
colors <-c("red","orange","yellow","green","navy","violet")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=seq(4,6.5, by0.5))
ed","orange","yellow","green","navy","violet")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=seq(4,6.5, by=0.5))
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=seq(4,6.5, by=0.5),freq=FALSE)
lines(density(mag))
mag <-quakes$mag
min(mag)
max(mag)
median(mag)
quantile(mag,c(0.25,0.5,0.75))
boxplot(mag)
boxplot(mag,main="지진 발생의 강도분포",xlab="지진",ylab="발생 건수",col="red")
source('C:/R/Rworkspace/git/03.31/plot.R', encoding = 'UTF-8')
install.packages("wordcloud")
library(wordcloud)
wordcloud(word, frequency,colors="blue")
word <- c("인천광역시","강화군","옹진군")
frequency <- c(651,85,61)
wordcloud(word, frequency,colors="blue")
wordcloud(word, frequency,colors="blue")
#지역별 순이동에 따른 워드 클라우드
word <- c("강남","강북","노원")
frequency <- c(651,340,61)
wordcloud(word, frequency,colors="blue")
wordcloud(word, frequency,colors="blue","red")
word <- c("강남","강북","노원","수서","여의도")
frequency <- c(651,340,61)
wordcloud(word, frequency,colors="blue","red")
- c("강남","강북","노원","수서","여의도")
frequency <- c(651,340,61,240,430)
wordcloud(word, frequency,colors="blue","red")
wordcloud(word, frequency,colors="blue")
wordcloud(word, frequency,colors="blue")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = F,
random.color = F,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = F,
random.color = F,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = F,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = T,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = T,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = T,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = T,
colors=rainbow(length(word))
)
useSejongDic()
pal2 <- brewer.pal(8,"Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
useSejongDic()
useSejongDic()
useSejongDic()
useSejongDic()
useSejongDic()
useSejongDic()
library(KoNLP)
library(Sejong)
useSejongDic()
library(RColorBrewer)
library(wordcloud)
pal2 <- brewer.pal(8,"Dark2")
text <- readLines(file.choose())
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
useSejongDic()
pal2 <- brewer.pal(8,"Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
library(rJava)
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
install.packages("C:/R/R-3.5.3/library/KoNLP/java/scala-library-2.11.8.jar", repos = NULL)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
()
useSejongDic()
pal2 <- brewer.pal(8,"Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
qplot(x)
install.packages("ggplot2")
library(ggplot2)
x <- c(1,2,3,4,1,2,3,1,2,1)
qplot(x)
qplot(data = mpg, x=hwy)
qplot(data=mag, x = cty)
qplot(data = mpg, x = cty)
qplot(data = mpg, x = drv, y = hwy)
qplot(data = mpg, x = drv, y = hwy,geom = "line")
qplot(data = mpg, x = drv, y = hwy,geom = "boxplot")
qplot(data = mpg, x = drv, y = hwy,geom = "boxplot", colour = drv)
?qplot
mpg
install.packages("dplyr")
library(dplyr)
df_raw <- data.frame(var1 = c(1, 2, 1), var2 = c(2, 3, 2))
df_raw
df_new <- rename(df_new, v2 = var2)  # var2 를 v2 로 수정
df_new
df_new <- df_raw  # 복사본 생성
df_new            # 출력
df_new <- rename(df_new, v2 = var2)  # var2 를 v2 로 수정
df_new
df <- data.frame(var1 = c(4, 3, 8), var2 = c(2, 6, 1))
df
df$var_sum <- df$var1 + df$var2  # var_sum 파생변수 생성
df
df$var_mean <- (df$var1 + df$var2)/2  # var_mean 파생변수 생성
df
mpg$total <- (mpg$cty + mpg$hwy)/2  # 통합 연비 변수 생성
head(mpg)
mean(mpg$total)
summary(mpg$total)  # 요약 통계량 산출
hist(mpg$total)     # 히스토그램 생성
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 20)
table(mpg$test)
?ifelse()
table(mpg$test)
qplot(mpg$test)
mpg$grade <- ifelse(mpg$total >= 30, "A", ifelse(mpg$total >= 20, "B", "C"))
head(mpg, 20)
mw <- as.data.frame(ggplot2::midwest)
head(mw,20)
view(mw)
View(mw)
mw <- rename(mw,c(total = poptotal,asian = popasian))
head(mw)
mw$asian_per_total <- mw$asian/mw$total
head(mw$asian_per_total)
hist(mw$asian_per_total)
hist(county,mw$asian_per_total)
hist(mw$county,mw$asian_per_total)
hist(mw$asian_per_total,mw$county)
hist(mw$asian_per_total,mw$county)
hist(mw$asian_per_total)
mean(mw$asian_per_total)
ifelse(mw$asian_per_total>mean(mw$asian_per_total,"large","small"))
ifelse(mw$asian_per_total>mean(mw$asian_per_total),"large","small")
#문제 5. "large"와 "small"에 해당하는 지역이 얼마나 되는지, 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.
table(mw$asian_per_total)
mw$test <- ifelse(mw$asian_per_total>mean(mw$asian_per_total),"large","small")
#문제 5. "large"와 "small"에 해당하는 지역이 얼마나 되는지, 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.
table(mw$test)
barplot(mw$test)
mw$asian_per_total <- mw$asian/mw$total*100
head(mw$asian_per_total)
hist(mw$asian_per_total)
mean(mw$asian_per_total)
mw$test <- ifelse(mw$asian_per_total>mean(mw$asian_per_total),"large","small")
#문제 5. "large"와 "small"에 해당하는 지역이 얼마나 되는지, 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.
table(mw$test)
barplot(mw$test)
qplot(mw$test)
exam <-  read.csv("csv_exam.csv")
exam <-  read.csv("csv_exam.csv")
exam <-  read.csv("csv_exam.csv")
exam
exam <-  read.csv("csv_exam.csv")
exam <-  read.csv("csv_exam.csv")
exam <- read.csv(file.choose(), header=T)
exam
exam %>% filter(class == 1)
exam %>% filter(class %in% c(1,3,5))  # 1, 3, 5 반에 해당하면 추출출
exam %>%   select(id, math) %>% head                  # 앞부분 6 행까지 추출
##파생변수 추가
exam %>%   mutate(total = math + english + science) %>%  head
exam %>%   mutate(total = math + english + science,          # 총합 변수 추가
mean = (math + english + science)/3) %>%   # 총평균 변수 추가
head
##집단별로 요약하기
exam %>% summarise(mean_math = mean(math))  # math 평균 산출
exam %>%   group_by(class) %>%                # class 별로 분리
summarise(mean_math = mean(math))  # math 평균 산출
exam %>%   group_by(class) %>%                   # class 별로 분리
summarise(mean_math = mean(math),     # math 평균
sum_math = sum(math),       # math 합계
median_math = median(math), # math 중앙값
n = n())                    # 학생
##데이터 합치기
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5),                     midterm = c(60, 80, 70, 90, 85))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5),                     final = c(70, 83, 65, 95, 80)
##데이터 합치기
# 중간고사 데이터 생성
test1 <- data.frame(id = c(1, 2, 3, 4, 5), midterm = c(60, 80, 70, 90, 85))
# 기말고사 데이터 생성
test2 <- data.frame(id = c(1, 2, 3, 4, 5), final = c(70, 83, 65, 95, 80))
total <- left_join(test1, test2, by = "id")  # id 기준으로 합쳐 total 에 할당
total                                        # total 출력
#교사 데이터 생성
name <- data.frame(class = c(1, 2, 3, 4, 5), teacher = c("kim", "lee", "park", "choi", "jung"))
name
exam_new <- left_join(exam, name, by = "class") exam_new
exam_new <- left_join(exam, name, by = "class")
exam_new
#세로로 합치기
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all 에 할당
#세로로 합치기
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all 에 할당
#세로로 합치기
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all 에 할당
#세로로 합치기
# 학생 1~5 번 시험 데이터 생성
group_a <- data.frame(id = c(1, 2, 3, 4, 5), test = c(60, 80, 70, 90, 85))
# 학생 6~10 번 시험 데이터 생성
group_b <- data.frame(id = c(6, 7, 8, 9, 10), test = c(70, 83, 65, 95, 80))
group_all <- bind_rows(group_a, group_b)  # 데이터 합쳐서 group_all 에 할당
group_all                                 # group_all 출
## 빠진 데이터를 찾아라! - 결측치 정제하기
#결측치(Missing Value)
df <- data.frame(sex = c("M", "F", NA, "M", "F"), score = c(5, 4, 3, 4, NA))
df
#결측치 확인
is.na(df)         # 결측치 확인
table(is.na(df))  # 결측치 빈도 출력
table(is.na(df$sex))    # sex 결측치 빈도 출력
table(is.na(df$score))  # score 결측치 빈도 출력
#결측치 포함한 상태로 연산
mean(df$score)  # 평균 산출
sum(df$score)   # 합계 산출
#결측치 제거
df %>% filter(is.na(score))   # score 가 NA 인 데이터만 출력
df %>% filter(!is.na(score))  # score 결측치 제거
df_nomiss <- df %>% filter(!is.na(score))  # score 결측치 제거
mean(df_nomiss$score)                      # score 평균 산출
sum(df_nomiss$score)                       # score 합계 산출
#여러변수 결측치 제거
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
df_nomiss2 <- na.omit(df)  # 모든 변수에 결측치 없는 데이터 추출
df_nomiss2                 # 출력
#결측치 제외 기능 이용하기
mean(df$score, na.rm = T)  # 결측치 제외하고 평균 산출
sum(df$score, na.rm = T)   # 결측치 제외하고 합계 산출
# 결측치 이용
exam <- read.csv("csv_exam.csv")            # 데이터 불러오기
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15 행의 math 에 NA 할당
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))  # 결측치 제외하고 평균 산출
# 결측치 이용
exam <- read.csv("csv_exam.csv")            # 데이터 불러오기
# 결측치 이용
exam <- read.csv(file.choose(), header = T)            # 데이터 불러오기
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15 행의 math 에 NA 할당
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math, na.rm = T))  # 결측치 제외하고 평균 산출
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15 행의 math 에 NA 할당
exam %>% summarise(mean_math = mean(math))             # 평균 산출
# 결측치 이용
exam <- read.csv(file.choose(), header = T)            # 데이터 불러오기
exam
exam[c(3, 8, 15), "math"] <- NA             # 3, 8, 15 행의 math 에 NA 할당
exam
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(exam$math))             # 평균 산출
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam %>% summarise(mean_math = mean(math))             # 평균 산출
exam$math <- ifelse(is.na(exam$math), mean(exam$math), exam$math)  # math 가 NA 면 55 로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
exam$math <- ifelse(is.na(exam$math), mean(exam$math), exam$math)  # math 가 NA 면 55 로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
exam$math <- ifelse(is.na(exam$math), 55, exam$math)  # math 가 NA 면 55 로 대체
table(is.na(exam$math))                               # 결측치 빈도표 생성
#이상치
outlier <- data.frame(sex = c(1, 2, 1, 3, 2, 1), score = c(5, 4, 3, 4, 2, 6))
outlier
table(outlier$sex)
table(outlier$score)
# sex 가 3 이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex) outlier
# sex 가 3 이면 NA 할당
outlier$sex <- ifelse(outlier$sex == 3, NA, outlier$sex)
outlier
# sex 가 1~5 아니면 NA 할당
outlier$score <- ifelse(outlier$score > 5, NA, outlier$score)
outlier
#결측치 제외하고 분석
outlier %>%   filter(!is.na(sex) & !is.na(score)) %>%   group_by(sex) %>%   summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>% group_by(sex) %>% summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
outlier
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
#결측치 제외하고 분석
outlier %>% filter(!is.na(sex) & !is.na(score)) %>% group_by(sex) %>% summarise(mean_score = mean(score))
#상자그림으로 극단치 기준 정해서 제거하기
mpg <- as.data.frame(ggplot2::mpg) boxplot(mpg$hwy)
#상자그림으로 극단치 기준 정해서 제거하기
mpg <- as.data.frame(ggplot2::mpg) boxplot(mpg$hwy)
