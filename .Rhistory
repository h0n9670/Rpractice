install.packages("plotrix")
library(plotrix)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
x<-c(9,15,20,6)
lable <- c("영업 1팀","영업 2팀","영업3팀","영업 4팀")
pie(x,labels=lavel,main="부서별 영업 실적")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
pie(x,labels=label,main="부서별 영업 실적")
View(x)
#기준선 변경
pie (x,init.angle = 90,labels=label,main="부서별 영업 실적")
main="부서별 영업 실적"
pct <- round(x/sum(x)*100)
label <-paste(label,pct)
lable <- paste(lable,"%",sep="")
pie(x,
labels=label,
init.angle = 90,
col=rainbow(length(x))
main="부서별 영업 실적"
pie(x,
labels=label,
init.angle = 90,
col=rainbow(length(x))
main="부서별 영업 실적")
pie(x,
labels=label,
init.angle = 90,
col=rainbow(length(x)),
main="부서별 영업 실적")
source('C:/R/Rworkspace/git/03.31/plot.R', encoding = 'UTF-8')
pie3D(x,labels=label,
explode=0.1,
labelcex=0.8,
main="부서별 영업 실적")
pie3D(x,labels=label,
explode=0.1, # 쪼개지는 비율
labelcex=0.3, # 라벨과 차트 사이에 크기 비율
main="부서별 영업 실적")
pie3D(x,labels=label,
explode=0.1, # 쪼개지는 비율
labelcex=0.8, # 라벨과 차트 사이에 크기 비율
main="부서별 영업 실적")
barplot(height,names.arg = name,main="부서별 영업 실적")
height <- c(9,15,20,6)
name <- c("영업1팀","영업2팀","영업3팀","영업4팀")
barplot(height,names.arg = name,main="부서별 영업 실적")
#막대 색 지정
barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)))
barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
ylim=c(0,25)
)
text(x=bp,y=height,lavels=round(height,0),pos=3)
#데이터 라벨 출력
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
ylim=c(0,25)
)
View(bp)
View(bp)
View(bp)
View(bp)
#데이터 라벨 출력
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
ylim=c(0,25)
)
View(bp)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
ylim=c(0,25)
)
text(x=bp,y=height,lavels=round(height,0),pos=3)
text(x=bp,y=height,labels=round(height,0),pos=3) #pos position
#데이터 라벨 출력
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
ylim=c(0,25)
)
text(x=bp,y=height,labels=round(height,0),pos=3) #pos position
text(x=bp,y=height,labels=round(height,0),pos=3) #pos position
source('C:/R/Rworkspace/git/03.31/plot.R', encoding = 'UTF-8', echo=TRUE)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
ylim=c(0,25)
)
text(x=bp,y=height,labels=round(height,0),pos=3) #pos position
barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
ylim=c(0,25)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
ylim=c(0,25),
horiz=TRUE,
width=50
)
text(x=bp,y=height,labels=round(height,0),pos=3) #pos position
#바 차트의 수평회전(가로 막대)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
horiz=TRUE,
width=50
)
legend_lbl <- c("2014년","2015년")
height1 <- c(4,18,5,8)
height2 <- rbind(height1,height2)
View(height)
name <- c("영업1팀","영업2팀","영업3팀","영업4팀")
legend_lbl <- c("2014년","2015년")
height1 <- c(4,18,5,8)
height2 <- rbind(height1,height2)
View(height)
name <- c("영업1팀","영업2팀","영업3팀","영업4팀")
legend_lbl <- c("2014년","2015년")
source('C:/R/Rworkspace/git/03.31/plot.R', encoding = 'UTF-8')
legend_lbl <- c("2014년","2015년")
height1 <- c(4,18,5,8)
height2 <- rbind(height1,height2)
View(height)
name <- c("영업1팀","영업2팀","영업3팀","영업4팀")
legend_lbl <- c("2014년","2015년")
height1 <- c(4,18,5,8)
height2 <- rbind(height1,height2)
# View(height)
name <- c("영업1팀","영업2팀","영업3팀","영업4팀")
legend_lbl <- c("2014년","2015년")
height2 <- rbind(height1,height2)
height  <- rbind(height1,height2)
)
height  <- rbind(height1,height2)
height1 <- c(4,18,5,8)
height2 <- c(9,15,20,6)
height  <- rbind(height1,height2)
View(height)
name <- c("영업1팀","영업2팀","영업3팀","영업4팀")
legend_lbl <- c("2014년","2015년")
source('C:/R/Rworkspace/git/03.31/plot.R', encoding = 'UTF-8')
height  <- rbind(height1,height2)
height1 <- c(4,18,5,8)
height2 <- c(9,15,20,6)
height  <- rbind(height1,height2)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_+lbl,
ylim=c(0,35)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_+lbl,
ylim=c(0,35)
)
View(bp)
legend_lbl <- c("2014년","2015년")
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_+lbl,
ylim=c(0,35)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
col=rainbow(length(height)),
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_lbl,
ylim=c(0,35)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_lbl,
ylim=c(0,35)
)
bp <-barplot(height,
names.arg=name,
main="부서별 영업 실적",
xlab="부서",
ylab="영업 실적(억원)",
col=c("darkblue","red"),
legend.text=legend_lbl,
ylim=c(0,50),
beside=TRUE,
args.legend=list(x='topright')
)
plot(weight)
View(women)
weight <-  women$weight
plot(weight)
#플로팅 문자의 출력
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow'
cex=1.5)
#플로팅 문자의 출력
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow',
cex=1.5)
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow',
cex=1.5)
plot(height,weight,xlab="키",ylab="몸무게")
height <- women$height
plot(height,weight,xlab="키",ylab="몸무게")
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow',
cex=1.5)
plot(height,weight,
xlab="키","몸무게",
pch=23,
col="blue",
bg='yellow',
cex=1.5)
# 플로팅 문자의 출력
plot(height,weight,xlab="키",ylab="몸무게",pch=23,col="blue",bg="yellow",cex=1.5)
#지진의 강도에 대한 히스토그램
head(quakes)
mag
mag
source('C:/R/Rworkspace/git/03.31/plot.R', encoding = 'UTF-8', echo=TRUE)
mag <- quakes$mag
mag
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진 강도",ylab="발생 건수")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,vreaks=(4,6.5, by0.5))
colors <-c("red","orange","yellow","green","navy","violet")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,vreaks=(4,6.5, by0.5))
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=(4,6.5, by0.5))
colors <-c("red","orange","yellow","green","navy","violet")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=(4,6.5, by0.5))
colors <-c("red","orange","yellow","green","navy","violet")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=seq(4,6.5, by0.5))
ed","orange","yellow","green","navy","violet")
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=seq(4,6.5, by=0.5))
hist(mag,
main="지진 발생 강도의 분포",
xlab="지진강도", ylab="발생 건수",col=colors,breaks=seq(4,6.5, by=0.5),freq=FALSE)
lines(density(mag))
mag <-quakes$mag
min(mag)
max(mag)
median(mag)
quantile(mag,c(0.25,0.5,0.75))
boxplot(mag)
boxplot(mag,main="지진 발생의 강도분포",xlab="지진",ylab="발생 건수",col="red")
source('C:/R/Rworkspace/git/03.31/plot.R', encoding = 'UTF-8')
install.packages("wordcloud")
library(wordcloud)
wordcloud(word, frequency,colors="blue")
word <- c("인천광역시","강화군","옹진군")
frequency <- c(651,85,61)
wordcloud(word, frequency,colors="blue")
wordcloud(word, frequency,colors="blue")
#지역별 순이동에 따른 워드 클라우드
word <- c("강남","강북","노원")
frequency <- c(651,340,61)
wordcloud(word, frequency,colors="blue")
wordcloud(word, frequency,colors="blue","red")
word <- c("강남","강북","노원","수서","여의도")
frequency <- c(651,340,61)
wordcloud(word, frequency,colors="blue","red")
- c("강남","강북","노원","수서","여의도")
frequency <- c(651,340,61,240,430)
wordcloud(word, frequency,colors="blue","red")
wordcloud(word, frequency,colors="blue")
wordcloud(word, frequency,colors="blue")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = F,
random.color = F,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = F,
random.color = F,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = F,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = T,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = T,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = T,
colors=rainbow(length(word))
)
#단어들의 색 변환
wordcloud(word,
frequency,
random.order = T,
random.color = T,
colors=rainbow(length(word))
)
useSejongDic()
pal2 <- brewer.pal(8,"Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
useSejongDic()
useSejongDic()
useSejongDic()
useSejongDic()
useSejongDic()
useSejongDic()
library(KoNLP)
library(Sejong)
useSejongDic()
library(RColorBrewer)
library(wordcloud)
pal2 <- brewer.pal(8,"Dark2")
text <- readLines(file.choose())
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
useSejongDic()
pal2 <- brewer.pal(8,"Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
library(rJava)
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
install.packages("C:/R/R-3.5.3/library/KoNLP/java/scala-library-2.11.8.jar", repos = NULL)
detach("package:KoNLP", unload = TRUE)
library(KoNLP)
()
useSejongDic()
pal2 <- brewer.pal(8,"Dark2")
text <- readLines(file.choose())
text
noun <- sapply(text, extractNoun, USE.NAMES=F) #행렬로 반환
noun
